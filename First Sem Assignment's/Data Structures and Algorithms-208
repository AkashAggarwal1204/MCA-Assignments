Question 1:  Write an algorithm for the addition of two matrices 

Answer. Matrix:
Matrix is a rectangular two-dimensional array of numbers arranged in rows and columns. A matrix with m rows and n columns can be called as m × n matrix. Individual entries in the matrix are called element and can be represented by aij which suggests that the element a is present in the ith row and jth column.

Addition of two matrices:
Two matrices A and B can be added if and only if they have same dimensions that are, the same number of rows and columns. It is not possible to add a 2 × 3 matrix with a 3 × 2 matrix. Addition of two matrices can be performed by adding their corresponding elements as
(A + B)ij= Aij + Bij
https://static.javatpoint.com/programs/images/program-to-calculate-the-addition-of-2-matrices2.png

Addition of two matrices can be performed by looping through the first and second matrix. Add the corresponding elements of both matrices and store the result in the third matrix.

Algorithm
Declare and initialize 2 two-dimensional arrays a and b.
Calculate the number of rows and columns present in the array a (as dimensions of both the arrays are same) and store it in variables rows and cols respectively.
Declare another array sum with the similar dimensions.
Loop through the arrays a and b, add the corresponding elements
e.g a11 + b11 = sum11
Display the elements of array sum.

Python
#Initialize matrix a  
a = [  
        [1, 0, 1],  
        [4, 5, 6],  
        [1, 2, 3]  
    ];  
   
#Initialize matrix b  
b = [  
          [1, 1, 1],  
          [2, 3, 1],  
          [1, 5, 1]  
     ];  
   
#Calculates number of rows and columns present in given matrix  
rows = len(a);  
cols = len(a[0]);  
   
#Array sum will hold the result and is initialized with zeroes.  
sum = [[0]*rows for i in range(cols)];  
   
#Performs addition of matrices a and b. Store the result in matrix sum  
for i in range(0, rows):  
    for j in range(0, cols):  
        sum[i][j] = a[i][j] + b[i][j];  
   
print("Addition of two matrices: ");  
for i in range(0, rows):  
    for j in range(0, cols):  
        print(sum[i][j]),  
    print("\n")  
    
    
Question 2. Explain the differences between a Tree and Binary Tree. 

Answer. ifference between General tree and Binary tree
https://media.geeksforgeeks.org/wp-content/uploads/20200219144238/General-Tree-vs-Binary-Tree.png


General Tree:
In the data structure, General tree is a tree in which each node can have either zero or many child nodes. It can not be empty. In general tree, there is no limitation on the degree of a node. The topmost node of a general tree is called the root node. There are many subtrees in a general tree. The subtree of a general tree is unordered because the nodes of the general tree can not be ordered according to specific criteria. In a general tree, each node has in-degree(number of parent nodes) one and maximum out-degree(number of child nodes) n.

https://media.geeksforgeeks.org/wp-content/uploads/20191005131555/General-Tree.jpg

Binary Tree:
A binary tree is the specialized version of the General tree. A binary tree is a tree in which each node can have at most two nodes. In a binary tree, there is a limitation on the degree of a node because the nodes in a binary tree can’t have more than two child node(or degree two). The topmost node of a binary tree is called root node and there are mainly two subtrees one is left-subtree and another is right-subtree. Unlike the general tree, the binary tree can be empty. Unlike the general tree, the subtree of a binary tree is ordered because the nodes of a binary tree can be ordered according to specific criteria.

https://media.geeksforgeeks.org/wp-content/uploads/20200123012956/Untitled-Diagram631.png


General tree	                                                                                               Binary tree
General tree is a tree in which each node can have many children or nodes.	                                Whereas in binary tree, each node can have at most two nodes.
The subtree of a general tree do not hold the ordered property.	                                            While the subtree of binary tree hold the ordered property.
In data structure, a general tree can not be empty.	                                                        While it can be empty.
In general tree, a node can have at most n(number of child nodes) nodes.	                                  While in binary tree, a node can have at most 2(number of child nodes) nodes.
In general tree, there is no limitation on the degree of a node.	                                          While in binary tree, there is limitation on the degree of a node because the nodes in a binary tree can’t have more than two child node.
In general tree, there is either zero subtree or many subtree.	                                            While in binary tree, there are mainly two subtree: Left-subtree and Right-subtree.


Question 3. Compare any two sorting algorithms


Answer. 

Bubble sort vs. Selection sort
Here we will look at the differences between the selection sort and bubble sort. Before understanding the differences, we should know about the selection sort and bubble sort individually.

What is selection sort?
Sorting means arranging the elements of an array in ascending order. Selection sort is one sorting technique used for sorting the array. In selection sort, an array is divided into two sub- arrays, i.e., one is an unsorted sub-array, and the other is sorted sub-array. Initially, we assume that the sorted subarray is empty. First, we will find the minimum element from the unsorted subarray, and we will swap the minimum element with an element which is at the beginning position of the array. This algorithm is named as selection sort because it is selecting the minimum element and then performs swapping.

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort.png

As we can observe in the above array that it contains 6 elements. The above array is an unsorted array whose indexing starts from 0 and ends at 5. The following are the steps used to sort the array:

Step 1: In the above array, the minimum element is 1; swap element 1 with an element 7.

Now, the sorted array contains only one element, i.e., 1, while the unsorted array contains 5

elements, i.e., 4, 10, 8, 3, 7.

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort2.png

Step 2: In the unsorted sub-array, the minimum element is 3, so swap element 3 with an element 4, which is at the beginning of the unsorted sub-array.

Now the sorted array contains two elements, i.e., 1 and 3, while the unsorted array has four elements, i.e., 10, 8, 4, 7, as shown in the above figure.

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort3.png

Step 3: Search the minimum element in the unsorted sub-array, and the minimum element is 4. Swap the element 4 with an element 10, which is at the beginning of the unsorted sub- array.

Now, the sorted array contains three elements, i.e., 1, 3, 4, while the unsorted array has three elements, i.e., 10, 8, 7

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort4.png

Step 4: Search the minimum element in the unsorted array, and the minimum element is 7. Swap element 7 with an element 10, which is at the beginning of the unsorted sub-array.

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort5.png

Now, the sorted array contains four elements, i.e., 1, 3, 4, 7, while the unsorted array has two elements, i.e., 10, 8.

Step 5: Search the minimum element in the unsorted array and the minimum element is 8. Swap the element 8 with an element 10 which is at the beginning of the unsorted sub-array.

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort6.png

Now, the sorted array contains the elements, i.e., 1, 3, 4, 7, 8.

Step 6: The last element is left in the unsorted sub-array. Move the last element to the sorted sub array shown as below:

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort7.png


What is Bubble sort?
The bubble sort is also one of the sorting techniques used for sorting the elements of an array. The basic principle behind the bubble sort is that the two adjacent elements are to be compared; if those elements are in correct order, then we move to the next iteration. Otherwise, we swap those two elements. Let's understand the bubble sort through an example.

https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort8.png

The above array is an unsorted array. An array consists of 5 integers, i.e., 15, 16, 6, 8, 5.

The following are the steps required used to sort the array:

Step 1: The a[0] element is compared with a a[1] element. The a[0] is less than a[1], i.e., 15<16, so no swapping would be done as shown in the below figure:
https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort9.png
Bubble sort vs. Selection sort
Step 2: Now, a[1] would be compared with a a[2] element. Since a[1] is greater than the a[0] element, i.e., 16>6, so swap 16 and 6 as shown in the below figure:
https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort10.png

Step 3: The a[2] would be compared with a a[3] element. Since a[2] is greater than the a[3] element, i.e., 16>8, so swap 16 and 8 elements as shown in the below figure:
https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort11.png
Bubble sort vs. Selection sort
Step 4: The a[3] would be compared with a[4] element. Since a[3] is greater than the a[4], i.e., 16 > 5, so swap 16 and 5 elements as shown in the below figure:
https://static.javatpoint.com/ds/images/bubble-sort-vs-selection-sort12.png
Bubble sort vs. Selection sort
As we can observe in the above array that the element which is the largest has been bubbled up to its correct position. In other words, we can say that the largest element has been placed at the last position of the array. The above steps are included in PASS 1in which the largest element is at its correct position.

We will again start comparing the elements from the first position in PASS 2.

Bubble sort	                                                                                                                                 Selection sort
In bubble sort, two adjacent elements are compared. If the adjacent elements are not at the correct position, swapping would be performed.	 In selection sort, the minimum element is selected from the array and swap with an element which is at the beginning of the unsorted sub array.                         
The time complexities in best case and worst case are O(n) and O(n2) respectively.	                                                         The time complexity in both best and worst cases is O(n 2).
It is not an efficient sorting technique.	                                                                                                 It is an efficient sorting technique as compared to Bubble sort.
It uses an exchanging method.	                                                                                                                 It uses a selection method.
It is slower than the selection sort as a greater number of comparisons is required.	                                                         It is faster than the bubble sort as a lesser number of comparisons is required.

Question 4. What are the advantages and disadvantages of a Singly Linked List over a Doubly Linked List. 

Answer.
There are many data structures like arrays, linked lists, etc. Each sort of arrangement has its strengths and weaknesses. For these reasons, it’s important to know the benefits and drawbacks of different data structures when it comes to designing, optimizing, and scaling programs. In this article, we will discuss the advantages and disadvantages of the linked list.

Linked List:

A Linked list is a dynamic arrangement that contains a “link” to the structure containing the subsequent items. It’s a set of structures ordered not by their physical placement in memory (like an array) but by logical links that are stored as a part of the info within the structure itself.
A linked list is another way to collect similar data. However, unlike an array, elements during a linked list aren’t in consecutive memory locations. A linked list consists of nodes that are connected with one another using pointers. The figure illustrates a linked list.
https://media.geeksforgeeks.org/wp-content/uploads/20201030205911/Linkedlist.png

Advantages Of Linked List:

Dynamic data structure: A linked list is a dynamic arrangement so it can grow and shrink at runtime by allocating and deallocating memory. So there is no need to give the initial size of the linked list.
No memory wastage: In the Linked list, efficient memory utilization can be achieved since the size of the linked list increase or decrease at run time so there is no memory wastage and there is no need to pre-allocate the memory.
Implementation: Linear data structures like stack and queues are often easily implemented using a linked list.
Insertion and Deletion Operations: Insertion and deletion operations are quite easier in the linked list. There is no need to shift elements after the insertion or deletion of an element only the address present in the next pointer needs to be updated.
Disadvantages Of Linked List:

Memory usage: More memory is required in the linked list as compared to an array. Because in a linked list, a pointer is also required to store the address of the next element and it requires extra memory for itself.
Traversal: In a Linked list traversal is more time-consuming as compared to an array. Direct access to an element is not possible in a linked list as in an array by index. For example, for accessing a node at position n, one has to traverse all the nodes before it.
Reverse Traversing: In a singly linked list reverse traversing is not possible, but in the case of a doubly-linked list, it can be possible as it contains a pointer to the previously connected nodes with each node. For performing this extra memory is required for the back pointer hence, there is a wastage of memory.
Random Access: Random access is not possible in a linked list due to its dynamic memory allocation.

